# -*- coding: utf-8 -*-
"""Predicting Cyberbullying on Social Media.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OiDivkup88XXN_1PeWnKwUag8hVD7pI6
"""

# 1. Import Necessary Libraries
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud

# Text Preprocessing and Feature Extraction
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer

# Machine Learning Models
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB

# Model Evaluation & Training Tools
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, precision_score, recall_score
from sklearn.pipeline import Pipeline
from sklearn.utils.class_weight import compute_class_weight

# Handle Class Imbalance
from imblearn.over_sampling import SMOTE
from imblearn.pipeline import make_pipeline as make_imb_pipeline

# Suppress warnings (optional)
import warnings
warnings.filterwarnings('ignore')

# Download NLTK data (run once)
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('omw-1.4')

df = pd.read_csv('/aggression_parsed_dataset[1].csv')
df.head()
# # Inspect the first few rows
# print("Dataset Head:")
# print(df.head())
# print("\n")

"""# New Section"""

# Check for missing values
print("Missing Values:")
print(df.isnull().sum())
print("\n")

# Check dataset info
print("Dataset Info:")
print(df.info())
print("\n")

# Check the distribution of the target variable
print("Label Distribution:")
# Rename the column '0' to 'label' if it exists
if '0' in df.columns:
    df = df.rename(columns={'0': 'label'})
print(df['label'].value_counts())
plt.figure(figsize=(8,5))
sns.countplot(x='label', data=df)
plt.title('Distribution of Cyberbullying Labels')
plt.xlabel('Label (0: Normal, 1: Bullying)')
plt.ylabel('Count')
plt.show()

lemmatizer = WordNetLemmatizer()
stop_words = set(stopwords.words('english'))

def preprocess_text(text):
    """
    - Lowercase the text
    - Remove URLs, mentions, hashtags
    - Remove punctuation and special characters
    - Remove digits
    - Tokenize and remove stopwords
    - Lemmatization
    """
    # Convert to lowercase
    text = text.lower()

    # Remove URLs, mentions, and hashtags
    text = re.sub(r'http\S+', '', text)
    text = re.sub(r'@\w+', '', text)
    text = re.sub(r'#\w+', '', text)

    # Remove punctuation and digits
    text = re.sub(r'[^\w\s]', '', text)
    text = re.sub(r'\d+', '', text)

    # Tokenize, remove stopwords, and lemmatize
    tokens = text.split()
    cleaned_tokens = [lemmatizer.lemmatize(word) for word in tokens if word not in stop_words and len(word) > 2]

    # Join the tokens back into a single string
    cleaned_text = ' '.join(cleaned_tokens)

    return cleaned_text

# Rename the text column before applying preprocessing
if ' he was never on it  "' in df.columns:
    df = df.rename(columns={' he was never on it  "': 'text'})

# Apply the preprocessing function to the text column
print("Preprocessing text... This may take a minute.")
df['cleaned_text'] = df['text'].apply(preprocess_text)

# Display original and cleaned text
print(df[['text', 'cleaned_text']].head())

# Separate data for visualization
normal_text = df[df['label'] == 0]['cleaned_text']
bullying_text = df[df['label'] == 1]['cleaned_text']

# Generate word clouds
plt.figure(figsize=(15, 7))

# Word Cloud for Normal Tweets
plt.subplot(1, 2, 1)
wordcloud_normal = WordCloud(width=600, height=400, background_color='white').generate(' '.join(normal_text))
plt.imshow(wordcloud_normal, interpolation='bilinear')
plt.title('Word Cloud - Normal Comments')
plt.axis('off')

# Word Cloud for Bullying Tweets
plt.subplot(1, 2, 2)
wordcloud_toxic = WordCloud(width=600, height=400, background_color='black').generate(' '.join(bullying_text))
plt.imshow(wordcloud_toxic, interpolation='bilinear')
plt.title('Word Cloud - Bullying Comments')
plt.axis('off')

plt.tight_layout()
plt.show()

# Define features (X) and target (y)
X = df['cleaned_text']
y = df['label']

# Handle missing values in the target variable
y = y.dropna()
X = X[y.index] # Keep only the rows in X that correspond to the non-null values in y

# Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

print(f"Training set size: {X_train.shape[0]}")
print(f"Test set size: {X_test.shape[0]}")

# Initialize a TF-IDF Vectorizer
tfidf = TfidfVectorizer(max_features=5000, ngram_range=(1,2))

# Transform the training and test data
X_train_tfidf = tfidf.fit_transform(X_train)
X_test_tfidf = tfidf.transform(X_test)

# Define a list of models to train
models = {
    'Logistic Regression': LogisticRegression(random_state=42, class_weight='balanced'),
    'Support Vector Machine': SVC(random_state=42, class_weight='balanced'),
    'Random Forest': RandomForestClassifier(random_state=42, class_weight='balanced'),
    'Naive Bayes': MultinomialNB()
}

# Dictionary to store model performance
results = {}

for name, model in models.items():
    print(f"Training {name}...")

    # Train the model
    model.fit(X_train_tfidf, y_train)

    # Make predictions
    y_pred = model.predict(X_test_tfidf)

    # Calculate metrics
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    # Store results
    results[name] = {
        'accuracy': accuracy,
        'precision': precision,
        'recall': recall,
        'f1': f1
    }

    # Print a classification report for detailed analysis
    print(f"\n--- {name} Classification Report ---")
    print(classification_report(y_test, y_pred))
    print("----------------------------------------\n")

# Compare model performance
results_df = pd.DataFrame(results).T
print("Model Comparison:")
print(results_df.round(4))

# Define the parameter grid
param_grid = {
    'n_estimators': [100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5]
}

# Initialize the model
rf = RandomForestClassifier(random_state=42, class_weight='balanced')

# Initialize GridSearchCV
grid_search = GridSearchCV(rf, param_grid, cv=3, scoring='f1', n_jobs=-1, verbose=1)

# Perform the grid search
print("Starting Grid Search...")
grid_search.fit(X_train_tfidf, y_train)

# Print the best parameters and score
print(f"Best Parameters: {grid_search.best_params_}")
print(f"Best Cross-Validation F1 Score: {grid_search.best_score_:.4f}")

# Evaluate the best model on the test set
best_rf = grid_search.best_estimator_
y_pred_best = best_rf.predict(X_test_tfidf)
print("\n--- Tuned Random Forest Report ---")
print(classification_report(y_test, y_pred_best))

# Define the parameter grid
param_grid = {
    'n_estimators': [100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5]
}

# Initialize the model
rf = RandomForestClassifier(random_state=42, class_weight='balanced')

# Initialize GridSearchCV
grid_search = GridSearchCV(rf, param_grid, cv=3, scoring='f1', n_jobs=-1, verbose=1)

# Perform the grid search
print("Starting Grid Search...")
grid_search.fit(X_train_tfidf, y_train)

# Print the best parameters and score
print(f"Best Parameters: {grid_search.best_params_}")
print(f"Best Cross-Validation F1 Score: {grid_search.best_score_:.4f}")

# Evaluate the best model on the test set
best_rf = grid_search.best_estimator_
y_pred_best = best_rf.predict(X_test_tfidf)
print("\n--- Tuned Random Forest Report ---")
print(classification_report(y_test, y_pred_best))

import joblib

# Let's save our best model and the TF-IDF vectorizer
# This creates a deployment package that knows how to process new text.
model_filename = 'cyberbullying_classifier_rf.pkl'
vectorizer_filename = 'tfidf_vectorizer.pkl'

joblib.dump(best_rf, model_filename)
joblib.dump(tfidf, vectorizer_filename)

print(f"Model saved as {model_filename}")
print(f"Vectorizer saved as {vectorizer_filename}")

# Load the model and vectorizer from disk
loaded_model = joblib.load(model_filename)
loaded_vectorizer = joblib.load(vectorizer_filename)

# Define a function to predict new comments
def predict_cyberbullying(comment):
    """
    Takes a raw string (social media comment), preprocesses it,
    vectorizes it, and runs the model prediction.
    """
    # Step 1: Preprocess the new comment
    cleaned_comment = preprocess_text(comment)

    # Step 2: Transform the comment using the pre-fitted TF-IDF vectorizer
    comment_tfidf = loaded_vectorizer.transform([cleaned_comment])

    # Step 3: Make a prediction
    prediction = loaded_model.predict(comment_tfidf)
    prediction_proba = loaded_model.predict_proba(comment_tfidf)

    # Step 4: Interpret the prediction
    label = "CYBERBULLYING" if prediction[0] == 1 else "NORMAL"
    confidence = prediction_proba[0][int(prediction[0])]

    return label, confidence

# Test the function with new examples
test_comments = [
    "You are so stupid and worthless, everyone hates you.",
    "I really enjoyed the concert last night, the music was great!",
    "Your outfit looks nice today!"
]

print("Real-Time Prediction Demo:\n")
for comment in test_comments:
    label, confidence = predict_cyberbullying(comment)
    print(f"Comment: '{comment}'")
    print(f"Prediction: {label} (Confidence: {confidence:.2%})")
    print("-" * 50)







